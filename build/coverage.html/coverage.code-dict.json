{"/home/travis/build/npmtest/node-npmtest-walk/test.js":"/* istanbul instrument in package npmtest_walk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-walk/lib.npmtest_walk.js":"/* istanbul instrument in package npmtest_walk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_walk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_walk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-walk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-walk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_walk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_walk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_walk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_walk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_walk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_walk.__dirname + '/lib.npmtest_walk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-walk/node_modules/walk/lib/walk.js":"// Adapted from work by jorge@jorgechamorro.com on 2010-11-25\n(function () {\n  \"use strict\";\n\n  function noop() {}\n\n  var fs = require('fs')\n    , forEachAsync = require('foreachasync').forEachAsync\n    , EventEmitter = require('events').EventEmitter\n    , TypeEmitter = require('./node-type-emitter')\n    , util = require('util')\n    , path = require('path')\n    ;\n\n  function appendToDirs(stat) {\n    /*jshint validthis:true*/\n    this.push(stat.name);\n  }\n\n  function wFilesHandlerWrapper(items) {\n    /*jshint validthis:true*/\n    this._wFilesHandler(noop, items);\n  }\n\n  function Walker(pathname, options, sync) {\n    EventEmitter.call(this);\n\n    var me = this\n      ;\n\n    options = options || {};\n    me._wStat = options.followLinks && 'stat' || 'lstat';\n    me._wStatSync = me._wStat + 'Sync';\n    me._wsync = sync;\n    me._wq = [];\n    me._wqueue = [me._wq];\n    me._wcurpath = undefined;\n    me._wfilters = options.filters || [];\n    me._wfirstrun = true;\n    me._wcurpath = pathname;\n\n    if (me._wsync) {\n      //console.log('_walkSync');\n      me._wWalk = me._wWalkSync;\n    } else {\n      //console.log('_walkASync');\n      me._wWalk = me._wWalkAsync;\n    }\n\n    options.listeners = options.listeners || {};\n    Object.keys(options.listeners).forEach(function (event) {\n      var callbacks = options.listeners[event]\n        ;\n\n      if ('function' === typeof callbacks) {\n        callbacks = [callbacks];\n      }\n\n      callbacks.forEach(function (callback) {\n        me.on(event, callback);\n      });\n    });\n\n    me._wWalk();\n  }\n\n  // Inherits must come before prototype additions\n  util.inherits(Walker, EventEmitter);\n\n  Walker.prototype._wLstatHandler = function (err, stat) {\n    var me = this\n      ;\n\n    stat = stat || {};\n    stat.name = me._wcurfile;\n\n    if (err) {\n      stat.error = err;\n      //me.emit('error', curpath, stat);\n      // TODO v3.0 (don't noop the next if there are listeners)\n      me.emit('nodeError', me._wcurpath, stat, noop);\n      me._wfnodegroups.errors.push(stat);\n      me._wCurFileCallback();\n    } else {\n      TypeEmitter.sortFnodesByType(stat, me._wfnodegroups);\n      // NOTE: wCurFileCallback doesn't need thisness, so this is okay\n      TypeEmitter.emitNodeType(me, me._wcurpath, stat, me._wCurFileCallback, me);\n    }\n  };\n  Walker.prototype._wFilesHandler = function (cont, file) {\n    var statPath\n      , me = this\n      ;\n\n\n    me._wcurfile = file;\n    me._wCurFileCallback = cont;\n    me.emit('name', me._wcurpath, file, noop);\n\n    statPath = me._wcurpath + path.sep + file;\n\n    if (!me._wsync) {\n      // TODO how to remove this anony?\n      fs[me._wStat](statPath, function (err, stat) {\n        me._wLstatHandler(err, stat);\n      });\n      return;\n    }\n\n    try {\n      me._wLstatHandler(null, fs[me._wStatSync](statPath));\n    } catch(e) {\n      me._wLstatHandler(e);\n    }\n  };\n  Walker.prototype._wOnEmitDone = function () {\n    var me = this\n      , dirs = []\n      ;\n\n    me._wfnodegroups.directories.forEach(appendToDirs, dirs);\n    dirs.forEach(me._wJoinPath, me);\n    me._wqueue.push(me._wq = dirs);\n    me._wNext();\n  };\n  Walker.prototype._wPostFilesHandler = function () {\n    var me = this\n      ;\n\n    if (me._wfnodegroups.errors.length) {\n      // TODO v3.0 (don't noop the next)\n      // .errors is an array of stats with { name: name, error: error }\n      me.emit('errors', me._wcurpath, me._wfnodegroups.errors, noop);\n    }\n    // XXX emitNodeTypes still needs refactor\n    TypeEmitter.emitNodeTypeGroups(me, me._wcurpath, me._wfnodegroups, me._wOnEmitDone, me);\n  };\n  Walker.prototype._wReadFiles = function () {\n    var me = this\n      ;\n\n    if (!me._wcurfiles || 0 === me._wcurfiles.length) {\n      return me._wNext();\n    }\n\n    // TODO could allow user to selectively stat\n    // and don't stat if there are no stat listeners\n    me.emit('names', me._wcurpath, me._wcurfiles, noop);\n\n    if (me._wsync) {\n      me._wcurfiles.forEach(wFilesHandlerWrapper, me);\n      me._wPostFilesHandler();\n    } else {\n      forEachAsync(me._wcurfiles, me._wFilesHandler, me).then(me._wPostFilesHandler);\n    }\n  };\n  Walker.prototype._wReaddirHandler = function (err, files) {\n    var fnodeGroups = TypeEmitter.createNodeGroups()\n      , me = this\n      , parent\n      , child\n      ;\n\n    me._wfnodegroups = fnodeGroups;\n    me._wcurfiles = files;\n\n    // no error, great\n    if (!err) {\n      me._wReadFiles();\n      return;\n    }\n\n    // TODO path.sep\n    me._wcurpath = me._wcurpath.replace(/\\/$/, '');\n\n    // error? not first run? => directory error\n    if (!me._wfirstrun) {\n      // TODO v3.0 (don't noop the next if there are listeners)\n      me.emit('directoryError', me._wcurpath, { error: err }, noop);\n      // TODO v3.0\n      //me.emit('directoryError', me._wcurpath.replace(/^(.*)\\/.*$/, '$1'), { name: me._wcurpath.replace(/^.*\\/(.*)/, '$1'), error: err }, noop);\n      me._wReadFiles();\n      return;\n    }\n\n    // error? first run? => maybe a file, maybe a true error\n    me._wfirstrun = false;\n\n    // readdir failed (might be a file), try a stat on the parent\n    parent = me._wcurpath.replace(/^(.*)\\/.*$/, '$1');\n    fs[me._wStat](parent, function (e, stat) {\n\n      if (stat) {\n        // success\n        // now try stat on this as a child of the parent directory\n        child = me._wcurpath.replace(/^.*\\/(.*)$/, '$1');\n        me._wcurfiles = [child];\n        me._wcurpath = parent;\n      } else {\n        // TODO v3.0\n        //me.emit('directoryError', me._wcurpath.replace(/^(.*)\\/.*$/, '$1'), { name: me._wcurpath.replace(/^.*\\/(.*)/, '$1'), error: err }, noop);\n        // TODO v3.0 (don't noop the next)\n        // the original readdir error, not the parent stat error\n        me.emit('nodeError', me._wcurpath, { error: err }, noop);\n      }\n\n      me._wReadFiles();\n    });\n  };\n  Walker.prototype._wFilter = function () {\n    var me = this\n      , exclude\n      ;\n\n    // Stop directories that contain filter keywords\n    // from continuing through the walk process\n    exclude = me._wfilters.some(function (filter) {\n      if (me._wcurpath.match(filter)) {\n        return true;\n      }\n    });\n\n    return exclude;\n  };\n  Walker.prototype._wWalkSync = function () {\n    //console.log('walkSync');\n    var err\n      , files\n      , me = this\n      ;\n\n    try {\n      files = fs.readdirSync(me._wcurpath);\n    } catch(e) {\n      err = e;\n    }\n\n    me._wReaddirHandler(err, files);\n  };\n  Walker.prototype._wWalkAsync = function () {\n    //console.log('walkAsync');\n    var me = this\n      ;\n\n    // TODO how to remove this anony?\n    fs.readdir(me._wcurpath, function (err, files) {\n      me._wReaddirHandler(err, files);\n    });\n  };\n  Walker.prototype._wNext = function () {\n    var me = this\n      ;\n\n    if (me._paused) {\n      return;\n    }\n    if (me._wq.length) {\n      me._wcurpath = me._wq.pop();\n      while (me._wq.length && me._wFilter()) {\n        me._wcurpath = me._wq.pop();\n      }\n      if (me._wcurpath && !me._wFilter()) {\n        me._wWalk();\n      } else {\n        me._wNext();\n      }\n      return;\n    }\n    me._wqueue.length -= 1;\n    if (me._wqueue.length) {\n      me._wq = me._wqueue[me._wqueue.length - 1];\n      return me._wNext();\n    }\n\n    // To not break compatibility\n    //process.nextTick(function () {\n      me.emit('end');\n    //});\n  };\n  Walker.prototype._wJoinPath = function (v, i, o) {\n    var me = this\n      ;\n\n    o[i] = [me._wcurpath, path.sep, v].join('');\n  };\n  Walker.prototype.pause = function () {\n    this._paused = true;\n  };\n  Walker.prototype.resume = function () {\n    this._paused = false;\n    this._wNext();\n  };\n\n  exports.walk = function (path, opts) {\n    return new Walker(path, opts, false);\n  };\n\n  exports.walkSync = function (path, opts) {\n    return new Walker(path, opts, true);\n  };\n}());\n","/home/travis/build/npmtest/node-npmtest-walk/node_modules/walk/lib/node-type-emitter.js":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true*/\n(function () {\n  \"use strict\";\n\n  // \"FIFO\" isn't easy to convert to camelCase and back reliably\n  var isFnodeTypes = [\n      \"isFile\", \"isDirectory\",  \"isSymbolicLink\", \"isBlockDevice\",  \"isCharacterDevice\", \"isFIFO\", \"isSocket\"\n    ],\n    fnodeTypes = [\n      \"file\",   \"directory\",    \"symbolicLink\",   \"blockDevice\",    \"characterDevice\",    \"FIFO\",   \"socket\"\n    ],\n    fnodeTypesPlural = [\n      \"files\",  \"directories\",  \"symbolicLinks\",  \"blockDevices\",   \"characterDevices\",   \"FIFOs\",  \"sockets\"\n    ];\n\n\n  // \n  function createNodeGroups() {\n    var nodeGroups = {};\n    fnodeTypesPlural.concat(\"nodes\", \"errors\").forEach(function (fnodeTypePlural) {\n      nodeGroups[fnodeTypePlural] = [];\n    });\n    return nodeGroups;\n  }\n\n\n  // Determine each file node's type\n  // \n  function sortFnodesByType(stat, fnodes) {\n    var i, isType;\n\n    for (i = 0; i < isFnodeTypes.length; i += 1) {\n      isType = isFnodeTypes[i];\n      if (stat[isType]()) {\n        stat.type = fnodeTypes[i];\n        fnodes[fnodeTypesPlural[i]].push(stat);\n        return;\n      }\n    }\n  }\n\n\n  // Get the current number of listeners (which may change)\n  // Emit events to each listener\n  // Wait for all listeners to `next()` before continueing\n  // (in theory this may avoid disk thrashing)\n  function emitSingleEvents(emitter, path, stats, next, self) {\n    var num = 1 + emitter.listeners(stats.type).length + emitter.listeners(\"node\").length;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    emitter.emit(stats.type, path, stats, nextWhenReady);\n    emitter.emit(\"node\", path, stats, nextWhenReady);\n    nextWhenReady();\n  }\n\n\n  // Since the risk for disk thrashing among anything\n  // other than files is relatively low, all types are\n  // emitted at once, but all must complete before advancing\n  function emitPluralEvents(emitter, path, nodes, next, self) {\n    var num = 1;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    fnodeTypesPlural.concat([\"nodes\", \"errors\"]).forEach(function (fnodeType) {\n      if (0 === nodes[fnodeType].length) { return; }\n      num += emitter.listeners(fnodeType).length;\n      emitter.emit(fnodeType, path, nodes[fnodeType], nextWhenReady);\n    });\n    nextWhenReady();\n  }\n\n  module.exports = {\n    emitNodeType: emitSingleEvents,\n    emitNodeTypeGroups: emitPluralEvents,\n    isFnodeTypes: isFnodeTypes,\n    fnodeTypes: fnodeTypes,\n    fnodeTypesPlural: fnodeTypesPlural,\n    sortFnodesByType: sortFnodesByType,\n    createNodeGroups: createNodeGroups\n  };\n}());\n","/home/travis/build/npmtest/node-npmtest-walk/node_modules/walk/lib/walk-async-only.js":"(function () {\n  \"use strict\"\n\n  // Array.prototype.forEachAsync(next, item, i, collection)\n  require('futures/forEachAsync');\n\n  function noop() {}\n\n  var fs = require('fs'),\n    path = require('path'),\n    EventEmitter = require('events').EventEmitter,\n    TypeEmitter = require('./node-type-emitter');\n\n  // 2010-11-25 jorge@jorgechamorro.com\n  function create(pathname, cb) {\n    var emitter = new EventEmitter(),\n      q = [],\n      queue = [q],\n      curpath;\n\n    function walk() { \n      fs.readdir(curpath, function(err, files) {\n        if (err) {\n          emitter.emit('directoryError', curpath, { error: err }, noop);\n          //emitter.emit('error', curpath, { error: err });\n        }\n        // XXX bug was here. next() was omitted\n        if (!files || 0 == files.length) {\n          return next();\n        }\n\n        var fnodeGroups = TypeEmitter.createNodeGroups();\n\n        // TODO could allow user to selectively stat\n        // and don't stat if there are no stat listeners\n        emitter.emit('names', curpath, files, noop);\n        files.forEachAsync(function (cont, file) {\n          emitter.emit('name', curpath, file, noop);\n          fs.lstat(curpath + path.sep + file, function (err, stat) {\n            stat = stat || {};\n            stat.name = file;\n            if (err) {\n              stat.error = err;\n              //emitter.emit('error', curpath, stat);\n              emitter.emit('nodeError', curpath, stat, noop);\n              fnodeGroups.errors.push(stat);\n              cont();\n            } else {\n              TypeEmitter.sortFnodesByType(stat, fnodeGroups);\n              TypeEmitter.emitNodeType(emitter, curpath, stat, cont);\n            }\n          });\n        }).then(function () {\n          if (fnodeGroups.errors.length) {\n            emitter.emit('errors', curpath, fnodeGroups.errors, noop);\n          }\n          TypeEmitter.emitNodeTypeGroups(emitter, curpath, fnodeGroups, function () {\n            var dirs = [];\n            fnodeGroups.directories.forEach(function (stat) {\n              dirs.push(stat.name);\n            });\n            dirs.forEach(fullPath);\n            queue.push(q = dirs);\n            next();\n          });\n        });\n      });\n    }\n    \n    function next() {\n      if (q.length) {\n        curpath = q.pop();\n        return walk();\n      }\n      if (queue.length -= 1) {\n        q = queue[queue.length-1];\n        return next();\n      }\n      emitter.emit('end');\n    }\n    \n    function fullPath(v,i,o) {\n      o[i]= [curpath, path.sep, v].join('');\n    }\n    \n    curpath = pathname;\n    walk();\n    \n    return emitter;\n  }\n\n  module.exports = create;\n}());\n"}